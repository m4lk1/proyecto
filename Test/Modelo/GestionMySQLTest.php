<?php

namespace ProyectoScrum\Modelo;

require 'vendor/autoload.php';

use ProyectoScrum\DatosServer\ConfigServer;
use ProyectoScrum\Modelo\conector;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-25 at 18:54:44.
 */
class GestionMySQLTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var GestionMySQL
     */
    protected $object;
    protected $hu = array(
        "nombre" => "HistoriaP",
        "descripcion" => "Historia de prueba para los test",
        "valor" => "100"
    );
    protected $id;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new GestionMySQL;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    protected function statement($sql){
        try{
            $config = new ConfigServer();
            $this->conexion = new conector($config);
            $this->conexion->conectar();
            $resultado = $this->conexion->sql($sql);
            if(preg_match("/^SELECT.*/", $sql) == 1){
                $resultado = $this->conexion->next();
            }
            $this->conexion->desconectar();
            return $resultado;
        } catch (\Exception $ex) {
            return false;
        }
    }

    /**
     * @covers ProyectoScrum\Modelo\GestionMySQL::insertar
     * @todo   Implement testInsertar().
     */
    public function testInsertar() {
        $arrayId = $this->statement("SELECT MAX(idHistorias) 'id' FROM Historias;");
        $this->id = $arrayId["id"];
        $this->id++;
        $esperado = array(
            "id" => $this->id,
            "nombre" => "HistoriaP",
            "descripcion" => "Historia de prueba para los test",
            "valor" => "100",
             "estado" => "0"
        );
        $obtenido = $this->object->insertar("Historias", $this->hu);
        return $this->assertEquals($obtenido, $esperado, "Error al insertar en la tabla");
    }

    /**
     * @covers ProyectoScrum\Modelo\GestionMySQL::leer
     * @todo   Implement testLeer().
     */
    public function testLeer() {
        
    }
    
    /**
     * @covers ProyectoScrum\Modelo\GestionMySQL::actualizar
     * @todo   Implement testActualizar().
     */
    public function testActualizar() {
        $nuevohu = array(
            "id" => $this->id,
            "nombre" => "HistoriaP",
            "descripcion" => "Historia de prueba para los test",
            "valor" => "100",
            "estado" => "1"
        );
        return $this->assertEquals($this->object->actualizar("Historias", $nuevohu), $nuevohu, "Error al actualizar en la tabla");
    }

    /**
     * @covers ProyectoScrum\Modelo\GestionMySQL::borrar
     * @todo   Implement testBorrar().
     */
    public function testBorrar() {
        return $this->assertEquals($this->object->borrar("Historias", $this->id), $this->id, "Error al borrar en la tabla");
    }

}
